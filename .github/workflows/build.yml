name: Build, Package and Release

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '2.0.0'
      deploy_ppa:
        description: 'Deploy to PPA?'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [ubuntu-20.04, ubuntu-22.04]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup
      run: sudo apt-get update && sudo apt-get install -y make
      
    - name: Build
      run: make
    
    - name: Test
      run: make test

  package-deb:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Debian package using Docker
      uses: docker://debian:bullseye
      with:
        args: sh -c "apt-get update && apt-get install -y make debhelper devscripts && make deb"
    
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: deb-package
        path: packaging/deb/*.deb

  package-source-deb:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Debian source package using Docker
      uses: docker://debian:bullseye
      env:
        DEBEMAIL: safarikikandi@gmail.com
        DEBFULLNAME: NetSnmp Enterprise
      with:
        args: |
          sh -c "
          apt-get update && 
          apt-get install -y make debhelper devscripts && 
          cd /github/workspace/packaging/deb && 
          debuild -S -us -uc
          "
    
    - name: Upload from absolute path
      uses: actions/upload-artifact@v4
      with:
        name: deb-source-package
        path: /github/workspace/*.dsc /github/workspace/*.tar.* /github/workspace/*_source.changes

  determine-version:
    runs-on: ubuntu-latest
    needs: [package-deb, package-source-deb]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      is_release: ${{ steps.version.outputs.IS_RELEASE }}
    steps:
    - name: Determine version
      id: version
      run: |
        # For release events, use the tag name
        if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        # For workflow_dispatch events, use the input version
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        # Fallback for manual triggers without version input
        else
          echo "VERSION=2.0.0" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi

  create-release:
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.is_release == 'true'
    permissions:
      contents: write
    
    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-package
        path: .
        
    - name: List downloaded files
      run: find . -name "*.deb" -type f
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packaging/deb/*.deb
          **/*.deb
        generate_release_notes: true
        tag_name: ${{ needs.determine-version.outputs.version }}

  deploy-ppa:
    runs-on: ubuntu-latest
    needs: determine-version
    if: |
      (needs.determine-version.outputs.is_release == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_ppa == 'true')
    
    steps:
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-source-package
        path: .
        
    - name: Install dput
      run: sudo apt-get update && sudo apt-get install -y dput
        
    - name: List source files
      run: ls -la
        
    - name: Verify source packages exist
      id: check-files
      run: |
        if ls *.changes 1> /dev/null 2>&1; then
          echo "files_exist=true" >> $GITHUB_OUTPUT
        else
          echo "files_exist=false" >> $GITHUB_OUTPUT
          echo "No .changes files found. Available files:"
          ls -la
          exit 1
        fi
        
    - name: Deploy to PPA
      if: steps.check-files.outputs.files_exist == 'true'
      env:
        PPA_URL: ${{ secrets.PPA_URL }}
        PPA_GPG_KEY: ${{ secrets.PPA_GPG_KEY }}
        PPA_GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
        DEBEMAIL: safarikikandi@gmail.com
        DEBFULLNAME: NetSnmp Enterprise
      run: |
        echo "Deploying to PPA: $PPA_URL"
        
        # Import and setup GPG key if provided
        if [ -n "$PPA_GPG_KEY" ]; then
          echo "$PPA_GPG_KEY" | gpg --import --batch --yes
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)
          echo "Using GPG key ID: $KEY_ID"
          
          # Sign each changes file
          for changes_file in *.changes; do
            echo "Signing $changes_file"
            debsign -k "$KEY_ID" "$changes_file"
          done
        else
          echo "No GPG key provided, skipping signing"
        fi
        
        # Upload to PPA
        for changes_file in *.changes; do
          echo "Uploading $changes_file to PPA"
          dput "$PPA_URL" "$changes_file"
        done
  # package-rpm:
  #   runs-on: centos-8
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Build RPM package
  #     run: |
  #       sudo yum install -y make rpm-build
  #       make rpm
    
  #   - name: Upload RPM package
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: rpm-package
  #       path: packaging/rpm/*.rpm

  # package-arch:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Build Arch Linux package using Docker
  #     uses: docker://archlinux:latest
  #     with:
  #       args: sh -c "pacman -Sy --noconfirm make binutils fakeroot && make arch"
    
  #   - name: Upload Arch Linux package
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: arch-package
  #       path: packaging/arch/*.pkg.tar.*