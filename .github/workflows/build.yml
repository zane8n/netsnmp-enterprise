name: Build, Package and Release

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.0.1)'
        required: true
        default: '2.0.0'
      release_type:
        description: 'Release type'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - release
      deploy_ppa:
        description: 'Deploy to PPA?'
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: [ubuntu-20.04, ubuntu-22.04]
    
    steps:
    - uses: actions/checkout@v3
    - name: Setup
      run: sudo apt-get update && sudo apt-get install -y make
    - name: Build
      run: make
    - name: Test
      run: make test

  package-deb:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Build Debian package using Docker
      uses: docker://debian:bullseye
      with:
        args: sh -c "apt-get update && apt-get install -y make debhelper devscripts && make deb"
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: deb-package
        path: packaging/deb/*.deb

  package-source-deb:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Build Debian source package using Docker
      uses: docker://debian:bullseye
      env:
        DEBEMAIL: safarikikandi@gmail.com
        DEBFULLNAME: NetSnmp Enterprise
      with:
        args: |
          sh -c "
          apt-get update && 
          apt-get install -y make debhelper devscripts && 
          cd /github/workspace/packaging/deb && 
          # Generate buildinfo file by building first
          debuild -S -us -uc
          "
    - name: Copy source packages to current directory
      run: |
        cp ../*.dsc ../*.tar.* ../*_source.changes ../*.buildinfo ./
    - name: Upload Debian source package
      uses: actions/upload-artifact@v4
      with:
        name: deb-source-package
        path: |
          *.dsc
          *.tar.*
          *_source.changes
          *.buildinfo

  determine-version:
    runs-on: ubuntu-latest
    needs: [package-deb, package-source-deb]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      is_release: ${{ steps.version.outputs.IS_RELEASE }}
      release_type: ${{ steps.version.outputs.RELEASE_TYPE }}
    steps:
    - name: Determine version and type
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
          # For GitHub releases, use the tag name (remove 'v' prefix)
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=release" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual dispatch, use the input version
          VERSION="${{ github.event.inputs.version }}"
          # Clean up version input (remove any non-numeric/dot characters except for debian revision)
          VERSION=$(echo "$VERSION" | sed 's/[^0-9.]//g')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          # Fallback for other events
          VERSION="2.0.0"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=dev" >> $GITHUB_OUTPUT
        fi
        echo "Determined version: $VERSION"

  create-release:
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.is_release == 'true'
    permissions:
      contents: write
    
    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-package
        path: .
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.deb
        generate_release_notes: true
        tag_name: v${{ needs.determine-version.outputs.version }}

  deploy-ppa:
    runs-on: ubuntu-latest
    needs: determine-version
    if: |
      (needs.determine-version.outputs.release_type == 'release') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_ppa == 'true')
    
    steps:
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-source-package
        path: .
    - name: Install dput and devscripts
      run: sudo apt-get update && sudo apt-get install -y dput devscripts
    - name: Deploy to PPA
      env:
        PPA_URL: ${{ secrets.PPA_URL }}
        PPA_GPG_KEY: ${{ secrets.PPA_GPG_KEY }}
        PPA_GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
        DEBEMAIL: safarikikandi@gmail.com
        DEBFULLNAME: NetSnmp Enterprise
      run: |
        echo "Deploying to PPA: $PPA_URL"
        
        if [ -n "$PPA_GPG_KEY" ]; then
          echo "$PPA_GPG_KEY" | gpg --import --batch --yes
          # Use fingerprint instead of long key ID
          KEY_FINGERPRINT=$(gpg --list-secret-keys --with-colons --fingerprint | grep fpr | head -1 | cut -d: -f10)
          echo "Using GPG key fingerprint: $KEY_FINGERPRINT"
          
          for changes_file in *.changes; do
            echo "Signing $changes_file"
            debsign -k "$KEY_FINGERPRINT" "$changes_file"
          done
        else
          echo "No GPG key provided, skipping signing"
        fi
        
        for changes_file in *.changes; do
          echo "Uploading $changes_file to PPA"
          dput "$PPA_URL" "$changes_file"
        done
  # package-rpm:
  #   runs-on: centos-8
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Build RPM package
  #     run: |
  #       sudo yum install -y make rpm-build
  #       make rpm
    
  #   - name: Upload RPM package
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: rpm-package
  #       path: packaging/rpm/*.rpm

  # package-arch:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Build Arch Linux package using Docker
  #     uses: docker://archlinux:latest
  #     with:
  #       args: sh -c "pacman -Sy --noconfirm make binutils fakeroot && make arch"
    
  #   - name: Upload Arch Linux package
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: arch-package
  #       path: packaging/arch/*.pkg.tar.*