name: Release and PPA Deployment

on:
  release:
    types: [published]
  workflow_dispatch:  

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y make devscripts debhelper dput build-essential
        
    - name: build 
      run: |
        make 

  package-deb:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Debian package using Docker
      uses: docker://debian:bullseye
      with:
        args: sh -c "apt-get update && apt-get install -y make debhelper devscripts && make deb"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packaging/deb/*.deb
        generate_release_notes: true
        
    - name: Build source package for PPA
      run: |
        cd packaging/deb
        # Update changelog with release version
        dch -v "${{ github.event.release.tag_name }}-1" "New upstream release"
        dch -r --distribution stable ""
        debuild -S -sa
        
    - name: Upload source package to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packaging/deb/../*.dsc
          packaging/deb/../*.tar.*
          packaging/deb/../*_source.changes
        tag_name: ${{ github.event.release.tag_name }}
        
    - name: Store source package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ppa-source-packages
        path: |
          packaging/deb/../*.dsc
          packaging/deb/../*.tar.*
          packaging/deb/../*_source.changes

  deploy-ppa:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event.release.prerelease == false  # Only deploy to PPA for stable releases
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Download source package artifacts
      uses: actions/download-artifact@v4
      with:
        name: ppa-source-packages
        
    - name: Install dput
      run: sudo apt-get update && sudo apt-get install -y dput
        
    - name: Deploy to PPA
      env:
        PPA_URL: ${{ secrets.PPA_URL }}  # e.g., ppa:zane8n/netsnmp
        PPA_GPG_KEY: ${{ secrets.PPA_GPG_KEY }}
        PPA_GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
      run: |
        if [ -n "$PPA_URL" ] && [ -n "$PPA_GPG_KEY" ]; then
          echo "Deploying to PPA: $PPA_URL"
          
          # Import GPG key
          echo "$PPA_GPG_KEY" | gpg --import
          
          # Sign the changes file
          debsign -k "$PPA_GPG_KEY" *.changes
          
          # Upload to PPA
          dput "$PPA_URL" *.changes
        else
          echo "PPA credentials not set, skipping PPA deployment"
          echo "Source packages are available in the release artifacts"
        fi