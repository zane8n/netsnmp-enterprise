name: Release and PPA Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '2.0.0'
      deploy_ppa:
        description: 'Deploy to PPA?'
        required: true
        default: false
        type: boolean

jobs:
  download-artifacts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-package
        path: binary-artifacts
        
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-source-package
        path: source-artifacts
        
    - name: Determine version
      id: version
      run: |
        # For release events, use the tag name
        if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        # For workflow_dispatch events, use the input version
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        # Fallback for manual triggers without version input
        else
          echo "VERSION=2.0.0" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi

    - name: List artifacts
      run: |
        echo "Binary artifacts:"
        ls -la binary-artifacts/
        echo "Source artifacts:"
        ls -la source-artifacts/

    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      is_release: ${{ steps.version.outputs.IS_RELEASE }}

  create-release:
    runs-on: ubuntu-latest
    needs: download-artifacts
    if: needs.download-artifacts.outputs.is_release == 'true'
    
    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-package
        path: .
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: binary-artifacts/packaging/deb/*.deb
        generate_release_notes: true
        tag_name: ${{ needs.download-artifacts.outputs.version }}

  deploy-ppa:
    runs-on: ubuntu-latest
    needs: download-artifacts
    if: |
      (needs.download-artifacts.outputs.is_release == 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_ppa == 'true')
    
    steps:
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: deb-source-package
        path: .
        
    - name: Install dput
      run: sudo apt-get update && sudo apt-get install -y dput
        
    - name: List source files
      run: ls -la
        
    - name: Deploy to PPA
      env:
        PPA_URL: ${{ secrets.PPA_URL }}
        PPA_GPG_KEY: ${{ secrets.PPA_GPG_KEY }}
        PPA_GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
        DEBEMAIL: safarikikandi@gmail.com
        DEBFULLNAME: NetSnmp Enterprise
      run: |
        echo "Deploying to PPA: $PPA_URL"
        
        # Import and setup GPG key if provided
        if [ -n "$PPA_GPG_KEY" ]; then
          echo "$PPA_GPG_KEY" | gpg --import --batch --yes
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)
          echo "Using GPG key ID: $KEY_ID"
          
          # Sign each changes file
          for changes_file in *.changes; do
            echo "Signing $changes_file"
            debsign -k "$KEY_ID" "$changes_file"
          done
        else
          echo "No GPG key provided, skipping signing"
        fi
        
        # Upload to PPA
        for changes_file in *.changes; do
          echo "Uploading $changes_file to PPA"
          dput "$PPA_URL" "$changes_file"
        done